openapi: 3.0.1
info:
  title: magicbus-be
  description: back-end magicbus service
  contact:
    email: francescogrossi.work@gmail.com
  version: 2.0.5
externalDocs:
  description: trello for magicbus
  url: https://trello.com/b/GZoRl8hc/magicbus-dev
servers:
  - url: "{url-prefix-magicbus-be}/api/magicbus/v1"
    variables:
      url-prefix-magicbus-be:
        default: http://localhost:8080
tags:
  - name: magicbus ingredient operation
    description: crud operation on ingredient object

security:
  - apiKeyAuth: []

paths:
  /ingredient/insert:
    put:
      tags:
        - magicbus ingredient operation
      summary: insert ingredient
      operationId: insert-ingredient
      requestBody:
        description: insert ingredient request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertIngredientRequest'
        required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientResult'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    InsertIngredientRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        available:
          type: boolean
        additionalCostForClient:
          type: number
        purchaseCost:
          type: number
        measureUnit:
          $ref: '#/components/schemas/MeasureUnit'
        ingredientType:
          $ref: '#/components/schemas/IngredientType'
        availabilityPeriod:
          $ref: '#/components/schemas/AvailabilityPeriod'
        brandName:
          type: string
      required:
        - name
        - description

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    Errors:
      type: array
      items:
        $ref: '#/components/schemas/Error'

    IngredientResult:
      type: object
      properties:
        ingredientDTO:
          $ref: '#/components/schemas/IngredientDTO'
  responses:
      #400
      BadRequestError:
        description: Bad Request
        content:
          application/json:
           schema:
            $ref: '#/components/schemas/Error'

      #401
      UnauthorizedError:
        description: Unauthorized
        headers:
          WWW_Authenticate:
            schema:
              type: string
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      #404
      NotFoundError:
        description: Not Found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

      #409
      ConflictError:
        description: Not Found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
        #500
      InternalServerError:
        description: Internal Server Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
  securitySchemes:
    # The client sends HTTP requests with the Authorization header that contains the word
    # Basic word followed by a space and a base64-encoded string username:password.
    # Example > Authorization: Basic ZGVtbzpwQDU1dzByZA== (demo:p@55w0rd)
    # Because base64 is easily decoded, Basic authentication should only be used together
    # with other security mechanisms such as HTTPS/SSL.
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    # An API key is a token that a client provides when making API calls. The key can be
    # sent in the query string:
    #   GET /something?api_key=abcdef12345
    # or as a request header:
    #   GET /something HTTP/1.1
    #   X-API-Key: abcdef12345
    # or as a cookie:
    #   GET /something HTTP/1.1
    #   Cookie: X-API-KEY=abcdef12345
    # API keys are supposed to be a secret that only the client and server know. Like
    # Basic authentication, API key-based authentication is only considered secure if
    # used together with other security mechanisms such as HTTPS/SSL.


